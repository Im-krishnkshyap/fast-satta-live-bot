import requests
from bs4 import BeautifulSoup
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Application
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime

BOT_TOKEN = "8045217918:AAGqMoKrbMNni9eM7VGlmgETy6tZpMzSuos"
CHAT_ID = "-1002618033336"

bot = Bot(token=BOT_TOKEN)
scheduler = BackgroundScheduler()

# ‚ùå ‡§π‡§ü‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ó‡•á‡§Æ‡•ç‡§∏ ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü
EXCLUDED_GAMES = ["char minar", "charminar", "char-minar"]

# ‚úÖ Webhook ‡§π‡§ü‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (Conflict Error ‡§∏‡•á ‡§¨‡§ö‡§æ‡§µ)
async def remove_webhook(app: Application):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook deleted successfully.")
    except Exception as e:
        print("‚ùå Webhook delete failed:", e)

# üîç ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü ‡§∏‡•ç‡§ï‡•ç‡§∞‡•à‡§™ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
def fetch_all_results():
    url = "https://satta-king-fixed-no.in/"
    try:
        r = requests.get(url, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")
        blocks = soup.find_all("div", class_="resultmain")

        results_by_date = {}
        for block in blocks:
            date_tag = block.find("p", class_="resultmaintime")
            if not date_tag:
                continue

            try:
                date_text = date_tag.text.strip()
                date_obj = datetime.strptime(date_text, "%d %B %Y %I:%M %p")
                date_key = date_obj.strftime("%d-%m-%Y")
            except:
                continue

            games = block.find_all("p", class_="livegame")
            values = block.find_all("p", class_="liveresult")

            day_result = {}
            for g, v in zip(games, values):
                name = g.text.strip().lower()
                value = v.text.strip()
                if name in EXCLUDED_GAMES:
                    continue
                day_result[name] = value

            if date_key not in results_by_date:
                results_by_date[date_key] = {}

            results_by_date[date_key].update(day_result)

        return results_by_date
    except:
        return {}

# üìã ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü ‡§ï‡§æ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§¨‡§®‡§æ‡§®‡§æ
def format_result(data: dict, date_label: str):
    msg = f"*üìÖ {date_label} ‡§ï‡•á ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü:*\n"
    for game, val in data.items():
        emoji_val = ''.join(f"{d}Ô∏è‚É£" for d in val if d.isdigit()) if val.upper() != "WAIT" else "‚è≥"
        msg += f"*{game.upper()}* == {emoji_val}\n"
    return msg

# üîò /start ‡§ï‡§Æ‡§æ‡§Ç‡§°
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üôè *‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à Fast Satta Live Bot ‡§Æ‡•á‡§Ç!*\n\n"
        "üì¢ ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n"
        "üëâ /result - ‡§Ü‡§ú ‡§ï‡§æ ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü\n"
        "üëâ /date DD-MM-YYYY - ‡§ï‡§ø‡§∏‡•Ä ‡§¶‡§ø‡§® ‡§ï‡§æ\n"
        "üëâ /history - ‡§™‡§ø‡§õ‡§≤‡•á ‡§¶‡§ø‡§® ‡§ï‡•á ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü\n"
        "üëâ /help - ‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏",
        parse_mode="Markdown"
    )

# üîò /help ‡§ï‡§Æ‡§æ‡§Ç‡§°
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå *Available Commands:*\n"
        "/start - ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂\n"
        "/help - ‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏\n"
        "/result - ‡§Ü‡§ú ‡§ï‡§æ ‡§≤‡§æ‡§á‡§µ ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü\n"
        "/date DD-MM-YYYY - ‡§ï‡§ø‡§∏‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ‡§º ‡§ï‡§æ ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü\n"
        "/history - ‡§™‡§ø‡§õ‡§≤‡•á 5 ‡§¶‡§ø‡§® ‡§ï‡•á ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü",
        parse_mode="Markdown"
    )

# üîò /result ‡§ï‡§Æ‡§æ‡§Ç‡§°
async def result_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_data = fetch_all_results()
    today = datetime.now().strftime("%d-%m-%Y")
    data = all_data.get(today)
    if data:
        msg = format_result(data, today)
    else:
        msg = "‚ùå ‡§Ü‡§ú ‡§ï‡§æ ‡§∞‡§ø‡§ú‡§º‡§≤‡•ç‡§ü ‡§Ö‡§≠‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§"
    await update.message.reply_text(msg, parse_mode="Markdown")

# üîò /history ‡§ï‡§Æ‡§æ‡§Ç‡§°
async def history_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_data = fetch_all_results()
    sorted_dates = sorted(all_data.keys(), reverse=True)[:5]
    msg = "üìÖ *Recent Results:*\n"
    for date in sorted_dates:
        results = all_data[date]
        line = ', '.join([f"{k.upper()}={v}" for k, v in results.items()])
        msg += f"{date} ‚û§ {line}\n"
    await update.message.reply_text(msg, parse_mode="Markdown")

# üîò /date DD-MM-YYYY ‡§ï‡§Æ‡§æ‡§Ç‡§°
async def date_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§æ‡§∞‡•Ä‡§ñ‡§º ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á: /date 03-06-2025")
        return
    user_date = context.args[0]
    all_data = fetch_all_results()
    data = all_data.get(user_date)
    if data:
        msg = format_result(data, user_date)
    else:
        msg = f"‚ùå {user_date} ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§"
    await update.message.reply_text(msg, parse_mode="Markdown")

# ‚è∞ Auto scheduler for fixed timings
def schedule_jobs():
    times = ["03:15", "04:48", "06:15", "09:58", "11:57", "05:35"]
    for t in times:
        hr, mn = map(int, t.split(":"))
        scheduler.add_job(lambda: bot.send_message(chat_id=CHAT_ID, text="‚è≥ Auto Result Update Coming Soon"), "cron", hour=hr, minute=mn)
    scheduler.start()

# üöÄ Bot launch
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(remove_webhook).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("result", result_cmd))
    app.add_handler(CommandHandler("history", history_cmd))
    app.add_handler(CommandHandler("date", date_cmd))
    schedule_jobs()
    print("‚úÖ Bot started.")
    app.run_polling()
